#!/usr/bin/env python
import sys
import os
topdir = os.path.dirname(os.path.realpath(__file__)) + "../.."
topdir = os.path.realpath(topdir)
sys.path.insert(0, topdir)
from servicemanager.ovp_handler import ovpHandler, CipherError, ProtocolError, FileError, ModeError, RoleError, LocalportError, InterfaceExist
from servicemanager.validation import AddressError, validation as vld
from base_setup import auth
from flask import abort
from flask.ext.restful import Resource, reqparse
from execformat.formator import showConfig

ovp = ovpHandler()
class ovpService(Resource):
        
    def __init__(self):
        self.reqparse = reqparse.RequestParser()
        self.reqparse.add_argument('interface', type = str,required = True,location = 'json')
        self.reqparse.add_argument('mode', type = str, required = True, location = 'json')
        self.reqparse.add_argument('local_vaddr', type = str , location = 'json')
        self.reqparse.add_argument('remote_vaddr', type = str, location = 'json')
        self.reqparse.add_argument('remote_host', type = str, location = 'json')
        self.reqparse.add_argument('push_vsubnet', type = str, location = 'json')
        self.reqparse.add_argument('sharedkey_gen', type = str, location = 'json')
        self.reqparse.add_argument('sharedkey_path', type = str, location = 'json')
        self.reqparse.add_argument('role', type = str, location = 'json')
        self.reqparse.add_argument('keyfiles_path', type = list, location = 'json')

        """
        self.reqparse.add_argument('local_host', type = str, location = 'json')
        self.reqparse.add_argument('route_vpn', type = str, location = 'json')
        self.reqparse.add_argument('encrypt_algo', type = str, location = 'json')
        self.reqparse.add_argument('local_port', type = str, location = 'json')
        self.reqparse.add_argument('communic_prot', type = str, location = 'json')
        self.reqparse.add_argument('options', type = str, location = 'json')
        """
        super(ovpService, self).__init__()

    def get(self):
        show=showConfig('interfaces')
        return show.customized_show(['openvpn'])        
    """
    
    def ovp_config_elements(self,action):
        args = dict((k,v) for k, v in self.reqparse.parse_args().iteritems() if v)
        if len(args)==1 and action =='delete':
            if not self.ovp.del_vpn_config(args['interface']):
                return {'Error':'program can not delete %s. see log for more info!' %args['interface']}, 403
            return {'Info':'%s was deleted successfully!' %args['interface']},200
        else:
            return self.return_opts(self.ovp.set_interface_vpn(args['interface']),args['interface'])
            if 'sharedkey_gen' in args:
                return self.return_opts(self.ovp.shared_keygen(args['sharedkey_gen']),'pre shared secret')
            elif 'local_vaddr' in args:
                return self.return_opts(self.ovp.endpoint_local_remote_vaddr(action,'local',args['interface'],args['local_vaddr']),'local_vaddr')
            elif 'remote_vaddr' in args:
                return self.return_opts(self.ovp.endpoint_local_remote_vaddr(action,'remote',args['interface'],args['remote_vaddr']),'remote_vaddr')
            elif 'mode' in args:
                try:
                    self.ovp.vpn_mode(action,args['interface'],args['mode'])
                except ModeError,m:
                    return {'Error':'%s: %s '%(args['mode'],m.message)},403
            elif 'remote_host' in args:
                return self.return_opts(self.ovp.define_local_remote_host(action,args['interface'],'remote',args['remote_host']),'remote_host')
            elif 'local_host' in args:
                try:
                    self.ovp.define_local_remote_host(action,args['interface'],'local',args['local_host'])
                except AddressError,err:
                    return {'Error':err.message}, 403
            elif 'sharedkey_path' in args:
                return self.return_opts(self.ovp.shared_file_path(action,args['interface'],args['sharedkey_path']),'sharedkey_path')
            elif 'route_vpn' in args:
                return self.return_opts(self.ovp.access_route_vpn(action,args['interface'],args['route_vpn']),'new static vpn route')
            elif 'role' in args:
                try:
                    self.ovp.tls_role(action,args['interface'],args['role'])
                except RoleError,m:
                    return {'Error':'%s: %s '%(args['role'],m.message)},403
            elif 'keyfiles_path' in args:
                try:
                    return self.return_opts(self.ovp.tls_files(action,args['interface'],args['keyfiles_path']),args['keyfiles_path'])
                except FileError,e:
                    return {'Error':'setup %s failed! see log for more info!'%args['keyfiles_path']},403
            elif 'push_vsubnet' in args:
                return self.return_opts(self.ovp.server_range_addr(action,args['interface'],args['push_vsubnet']),args['push_vsubnet'])
            elif 'encrypt_algo' in args:
                try:
                    return self.return_opts(self.ovp.encryption_algorithm(action,args['interface'],args['encrypt_algo']),args['encrypt_algo'])
                except CipherError,e:
                    return {'Error':'%s: %s '%(args['encrypt_algo'],e.message)},403
            elif 'local_port' in args:
                try:
                    return self.return_opts(self.ovp.local_port(action,args['interface'],args['local_port']),args['local_port'])
                except LocalportError,e:
                    return {'Error':'%s:Invalid port!'%args['local_port']}, 403
            elif 'communic_prot' in args:
                try:
                    return self.return_opts(self.ovp.local_port(action,args['interface'],args['communic_prot']),args['communic_prot'])
                except ProtocolError,e:
                    return {'Error':'%s:Invalid communication protocol!'%args['communic_prot']}, 403
            elif 'options' in args:
                
            else:
                abort(400)
        else:
            abort(400)
    """
    def post(self):
        #return self.ovp_config_elements('set')
        args = dict((k,v) for k, v in self.reqparse.parse_args().iteritems() if v)
        keys=args.keys()
        try:
            if not self.ovp.set_interface_vpn(args['interface']):
                return {'Warning':'setting %s failed! see log for more infos! '%args['interface']}, 403
            if not self.ovp.vpn_mode('set',args['interface'],args['mode']):
                return {'Error':'set mode %s:operation failed!'%args['mode']}, 403
        except InterfaceExist,e:
            return {'Error':'setting %s failed! see log file'%args['interface']}, 403
        except ModeError,m:
            return {'Error':'set mode %s failed!'%args['mode']}, 403
        if args['mode']=='site-to-site':
            if 'role' in keys:
                try:
                    if not self.ovp.tls_role('set',args['interface'],args['role']):
                        return {'error':'operation failed while setting role! see log file'}, 403
                except RoleError,m:
                    return {'Error':'set role %s failed! see logfile!'%args['role']},400
            if not set(['local_vaddr','remote_vaddr','remote_host']).issubset(set(keys)):
                return {'Bad Request':'request is missing required options [local_vaddr,remote_vaddr,remote_host] to be set'}, 400
            if not self.ovp.endpoint_local_remote_vaddr('set','local',args['interface'],args['local_vaddr']):
                return {'Bad request':'setting %s failed! checking log is recommanded!'%args['local_vaddr']},400
            elif not self.ovp.endpoint_local_remote_vaddr('set','remote',args['interface'],args['remote_vaddr']):
                return {'Bad request':'setting %s failed! checking log is recommanded!'%args['remote_vaddr']},400
            elif not self.ovp.define_local_remote_host('set',args['interface'],'remote',args['remote_host']):
                return {'Error':'setting %s failed! checking log is recommanded!'%args['remote_host']},400
        elif args['mode']=='server':
            if not 'push_vsubnet' in keys:
                return {'Bad Request':'request is missing required options to be set'}, 400
            elif not self.ovp.server_range_addr('set',args['interface'],args['push_vsubnet']):
                return {'Error':'setting %s failed!'%args['push_vsubnet']},400
        if 'sharedkey_path' in keys:
            if 'sharedkey_gen' in keys:
                if not self.ovp.shared_keygen(args['sharedkey_gen']):
                    return{'warning':'generation pre shared secret failed! see logfile!'}, 403
            if not self.ovp.sharedkey_file_path('set',args['interface'],args['sharedkey_path']):
                return {'error':'setting pre shared secret failed! consulting logfile is recommanded!'},400
        elif 'keyfiles_path' in args:
            if 'role' not in keys and args['mode']=='site-to-site':
                return {'Error':'in site-to-site mode you have to specify the endpoint role'}, 400
            
            for file in args['keyfiles_path']:
                try:
                    if not self.ovp.tls_files('set',args['interface'],file):
                        return {'Error':'setting file under %s failed! see logfile!'%file}, 403
                except FileError,e:
                    return {'Error':'operation failed when setting %s'%file}, 400
        else:
            return {'Error':'you have to specify at least tls conf or pre shared secret conf!'},400
        return {'Info':'your current openvpn setting have been set successfully under %s interface'%args['interface']},200


class ovpServiceOptions(Resource):
    decorators=[auth.login_required]
    def __init__(self):
        self.reqparse = reqparse.RequestParser()
        self.reqparse.add_argument('local_host', type = str, location = 'json')
        self.reqparse.add_argument('route_vpn', type = str, location = 'json')
        self.reqparse.add_argument('encrypt_algo', type = str, location = 'json')
        self.reqparse.add_argument('local_port', type = str, location = 'json')
        self.reqparse.add_argument('communic_prot', type = str, location = 'json')
        self.reqparse.add_argument('options', type = str, location = 'json')    
        super(ovpServiceOptions, self).__init__()

    def get(self,interface):
        if not vld.testiface(interface):
            return {'Error':'%s does not exist!'%interface}, 400
        

    def put(self,interface):
        if not vld.testiface(interface):
            return {'Error':'%s does not exist!'%interface}, 400
    def delete(self,interface):
        if not vld.testiface(interface):
            return {'Error':'%s does not exist!'%interface}, 400
